package main

import (
	"github.com/gin-gonic/gin"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

var db *gorm.DB

type User struct {
	UserID   int    `gorm:"primaryKey;autoIncrement;not null" json:"user_id"`
	UserName string `gorm:"not null" json:"user_name"`
	Password string `gorm:"not null" json:"password"`
}

type Role struct {
	RoleID   int    `gorm:"primaryKey;autoIncrement;not null" json:"role_id"`
	RoleName string `gorm:"not null" json:"role_name"`
}

type UserRole struct {
	UserID int `gorm:"primaryKey;not null" json:"user_id"`
	RoleID int `gorm:"primaryKey;not null" json:"role_id"`
}

type Permission struct {
	PermissionID   int    `gorm:"primaryKey;autoIncrement;not null" json:"permission_id"`
	PermissionName string `gorm:"not null" json:"permission_name"`
}

type RolePermission struct {
	RoleID       int `gorm:"primaryKey;not null" json:"role_id"`
	PermissionID int `gorm:"primaryKey;not null" json:"permission_id"`
}

type Menu struct {
	MenuID   int    `gorm:"primaryKey;autoIncrement;not null" json:"menu_id"`
	MenuName string `gorm:"not null" json:"menu_name"`
	ParentID int    `gorm:"not null" json:"parent_id"`
	URL      string `gorm:"not null" json:"url"`
	Icon     string `gorm:"default:null" json:"icon"`
}

type RoleMenu struct {
	RoleID int `gorm:"primaryKey;not null" json:"role_id"`
	MenuID int `gorm:"primaryKey;not null" json:"menu_id"`
}

func main() {
	// 连接MySQL
	dsn := "root:password@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&parseTime=True&loc=Local"
	var err error
	db, err = gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		panic(err)
	}

	// 创建表结构
	err = db.AutoMigrate(&User{}, &Role{}, &UserRole{}, &Permission{}, &RolePermission{}, &Menu{}, &RoleMenu{})
	if err != nil {
		panic(err)
	}

	// 创建Gin HTTP服务器
	r := gin.Default()

	// 用户相关操作
	r.GET("/users", getUsers)
	r.POST("/user", createUser)
	r.PUT("/user/:id", updateUser)
	r.DELETE("/user/:id", deleteUser)

	// 角色相关操作
	r.GET("/roles", getRoles)
	r.POST("/role", createRole)
	r.PUT("/role/:id", updateRole)
	r.DELETE("/role/:id", deleteRole)

	// 权限相关操作
	r.GET("/permissions", getPermissions)
	r.POST("/permission", createPermission)
	r.PUT("/permission/:id", updatePermission)
	r.DELETE("/permission/:id", deletePermission)

	// 菜单相关操作
	r.GET("/menus", getMenus)
	r.POST("/menu", createMenu)
	r.PUT("/menu/:id", updateMenu)
	r.DELETE("/menu/:id", deleteMenu)

	// 运行HTTP服务器
	r.Run(":8080")
}

// 用户相关操作
func getUsers(c *gin.Context) {
	var users []User
	db.Find(&users)
	c.JSON(200, users)
}

func createUser(c *gin.Context) {
	var user User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	db.Create(&user)
	c.JSON(201, user)
}

func updateUser(c *gin.Context) {
	id := c.Param("id")
	var user User
	if err := db.Where("user_id=?", id).First(&user).Error; err != nil {
		c.JSON(404, gin.H{"error": "User not found"})
		return
	}
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	db.Save(&user)
	c.JSON(200, user)
}

func deleteUser(c *gin.Context) {
	id := c.Param("id")
	var user User
	if err := db.Where("user_id=?", id).First(&user).Error; err != nil {
		c.JSON(404, gin.H{"error": "User not found"})
		return
	}
	db.Delete(&user)
	c.Status(204)
}

// 角色相关操作
func getRoles(c *gin.Context) {
	var roles []Role
	db.Find(&roles)
	c.JSON(200, roles)
}

func createRole(c *gin.Context) {
	var role Role
	if err := c.ShouldBindJSON(&role); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	db.Create(&role)
	c.JSON(201, role)
}

func updateRole(c *gin.Context) {
	id := c.Param("id")
	var role Role
	if err := db.Where("role_id=?", id).First(&role).Error; err != nil {
		c.JSON(404, gin.H{"error": "Role not found"})
		return
	}
	if err := c.ShouldBindJSON(&role); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	db.Save(&role)
	c.JSON(200, role)
}

func deleteRole(c *gin.Context) {
	id := c.Param("id")
	var role Role
	if err := db.Where("role_id=?", id).First(&role).Error; err != nil {
		c.JSON(404, gin.H{"error": "Role not found"})
		return
	}
	db.Delete(&role)
	c.Status(204)
}

// 权限相关操作
func getPermissions(c *gin.Context) {
	var permissions []Permission
	db.Find(&permissions)
	c.JSON(200, permissions)
}

func createPermission(c *gin.Context) {
	var permission Permission
	if err := c.ShouldBindJSON(&permission); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	db.Create(&permission)
	c.JSON(201, permission)
}

func updatePermission(c *gin.Context) {
	id := c.Param("id")
	var permission Permission
	if err := db.Where("permission_id=?", id).First(&permission).Error; err != nil {
		c.JSON(404, gin.H{"error": "Permission not found"})
		return
	}
	if err := c.ShouldBindJSON(&permission); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	db.Save(&permission)
	c.JSON(200, permission)
}

func deletePermission(c *gin.Context) {
	id := c.Param("id")
	var permission Permission
	if err := db.Where("permission_id=?", id).First(&permission).Error; err != nil {
		c.JSON(404, gin.H{"error": "Permission not found"})
		return
	}
	db.Delete(&permission)
	c.Status(204)
}

// 菜单相关操作
func getMenus(c *gin.Context) {
	var menus []Menu
	db.Find(&menus)
	c.JSON(200, menus)
}

func createMenu(c *gin.Context) {
	var menu Menu
	if err := c.ShouldBindJSON(&menu); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	db.Create(&menu)
	c.JSON(201, menu)
}

func updateMenu(c *gin.Context) {
	id := c.Param("id")
	var menu Menu
	if err := db.Where("menu_id=?", id).First(&menu).Error; err != nil {
		c.JSON(404, gin.H{"error": "Menu not found"})
		return
	}
	if err := c.ShouldBindJSON(&menu); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	db.Save(&menu)
	c.JSON(200, menu)
}

func deleteMenu(c *gin.Context) {
	id := c.Param("id")
	var menu Menu
	if err := db.Where("menu_id=?", id).First(&menu).Error; err != nil {
		c.JSON(404, gin.H{"error": "Menu not found"})
		return
	}
	db.Delete(&menu)
	c.Status(204)
}
